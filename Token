pragma solidity ^0.5.1;

contract StandardToken {
    string public constant name = "Unicoin Token";
    string public constant symbol = "UNI";
    uint8 public constant decimals = 18;
    uint _totalSupply;
  
  constructor() public{
      
     _totalSupply = 1000000 * 10**uint(decimals);
      balances[msg.sender] = _totalSupply;
     // emit Transfer(address(0), msg.sender, _totalSupply);
  }   
  function totalSupply() public view returns(uint256){
      return _totalSupply;
}
 // mapping (address => mapping (address => uint256)) internal allowed;
  mapping(address => uint256) balances;

  function transfer(address _to, uint256 _value) public returns (bool) {
//     require(_to != address(0));
//     require(_value <= balances[msg.sender]);

//     // SafeMath.sub will throw if there is not enough balance.
//     balances[msg.sender] = balances[msg.sender]-(_value);
//     balances[_to] = balances[_to]+(_value);
//   // emit Transfer(msg.sender, _to, _value);
//     return true;
  }

  function balanceOf(address _owner) public payable returns (uint256) {
    return balances[_owner];
}
  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
//     require(_to != address(0));
//     require(_value <= balances[_from]);
//     require(_value <= allowed[_from][msg.sender]);

//     balances[_from] = balances[_from]-(_value);
//     balances[_to] = balances[_to]+(_value);
//     allowed[_from][msg.sender] = allowed[_from][msg.sender]-(_value);
//   //  emit Transfer(_from, _to, _value);
//     return true;
  }

  function approve(address _spender, uint256 _value) public returns (bool) {
    // require(_value <= balances[msg.sender] && _value > 0);
    // allowed[msg.sender][_spender] = _value;
    // //emit Approval(msg.sender, _spender, _value);
    // return true;
  }
  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
   // return allowed[_owner][_spender];
  }
}
